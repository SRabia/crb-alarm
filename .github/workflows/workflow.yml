name: Build, Test, and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  ALSA_NO_PKG_CONFIG: 1
  

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cbr-alarm-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: cbr-alarm-windows-x86_64.exe

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install latest rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        target: ${{ matrix.target }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Run tests
      run: cargo test --target ${{ matrix.target }}

    - name: Rename binary
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv target/${{ matrix.target }}/release/cbr-alarm.exe ${{ matrix.artifact_name }}
        else
          mv target/${{ matrix.target }}/release/cbr-alarm ${{ matrix.artifact_name }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}

  # release:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Download all artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: ./artifacts

  #   - name: Create Release
  #     id: create_release
  #     uses: actions/github-script@v7
  #     with:
  #       github-token: ${{secrets.GITHUB_TOKEN}}
  #       script: |
  #         const fs = require('fs').promises;
  #         const { repo, owner } = context.repo;
  #         const tag_name = `${new Date().toISOString().split('T')[0]}-${context.sha.substring(0,7)}`;
  #         
  #         // Create release
  #         const release = await github.rest.repos.createRelease({
  #           owner,
  #           repo,
  #           tag_name,
  #           name: `Release ${tag_name}`,
  #           body: `Automated release for commit ${context.sha}`,
  #           draft: false,
  #           prerelease: false
  #         });
  #         
  #         // Upload Linux asset
  #         const linuxData = await fs.readFile('./artifacts/cbr-alarm-linux-x86_64/cbr-alarm-linux-x86_64');
  #         await github.rest.repos.uploadReleaseAsset({
  #           owner,
  #           repo,
  #           release_id: release.data.id,
  #           name: 'cbr-alarm-linux-x86_64',
  #           data: linuxData
  #         });
  #         
  #         // Upload Windows asset
  #         const windowsData = await fs.readFile('./artifacts/cbr-alarm-windows-x86_64.exe/cbr-alarm-windows-x86_64.exe');
  #         await github.rest.repos.uploadReleaseAsset({
  #           owner,
  #           repo,
  #           release_id: release.data.id,
  #           name: 'cbr-alarm-windows-x86_64.exe',
  #           data: windowsData
  #         });
  #         
  #         console.log(`Release created: ${release.data.html_url}`);
